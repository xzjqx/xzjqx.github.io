<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Vivado问题总结]]></title>
      <url>http://xzjqx.data/2018/04/14/Vivado%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>记录Vivado使用过程中的一些问题。<br><a id="more"></a></p>
<h2 id="Vivado-2017-3-启动超时"><a href="#Vivado-2017-3-启动超时" class="headerlink" title="Vivado 2017.3 启动超时"></a>Vivado 2017.3 启动超时</h2><p>Vivado启动两分钟后弹出如下界面，显示Vivado启动超时：<br><img src="启动超时.png" alt="启动超时"><br>我是在更新了Windows10系统到1790版本后出现这一问题，在<a href="https://forums.xilinx.com" target="_blank" rel="external">Xilinx论坛</a>发现同一问题，Xilinx官方也发现并解决了这个BUG。</p>
<blockquote>
<p>After installing the Windows 10 Fall Creators update (version 1709), when I try to launch Vivado, it fails or crashes.</p>
</blockquote>
<p>解决方法如下<a href="https://www.xilinx.com/support/answers/69908.html" target="_blank" rel="external">AR# 69908</a>：</p>
<blockquote>
<p>While this update for Windows 10 is not officially supported with Vivado 2017.3, the following work-around is available:</p>
<ol>
<li>Navigate to (Vivado Installed Directory)\2017.3\bin\unwrapped\win64.o</li>
<li>Backup ‘<strong>vivado.exe</strong>‘ by renaming it to ‘<strong>vivado.exe.backup</strong>‘</li>
<li>Copy ‘<strong>vivado-vg.exe</strong>‘ and paste it into the same folder.</li>
<li>Rename ‘<strong>vivado-vg - Copy.exe</strong>‘ to ‘<strong>vivado.exe</strong>‘</li>
</ol>
</blockquote>
<p>简单翻译一下：<br>当Windows10更新之后发现不能打开Vivado时，执行以下步骤：</p>
<ul>
<li>进入“Vivado安装目录\2017.3\bin\unwrapped\win64.0\”</li>
<li>将’<strong>vivado.exe</strong>‘重命名为<strong>vivado.exe.backup</strong>‘</li>
<li>将’<strong>vivado-vg.exe</strong>‘ 复制到当前目录</li>
<li>重命名’<strong>vivado-vg - Copy.exe</strong>‘为’<strong>vivado.exe</strong>‘<br>之后再打开Vivado就不会报错了</li>
</ul>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解计算机系统（CSAPP）实验二 Datalab]]></title>
      <url>http://xzjqx.data/2018/04/13/datalab/</url>
      <content type="html"><![CDATA[<h2 id="bitAnd-x-amp-y-using-only-and"><a href="#bitAnd-x-amp-y-using-only-and" class="headerlink" title="bitAnd - x&amp;y using only ~ and |"></a>bitAnd - x&amp;y using only ~ and |</h2><p>目标：不使用&amp;运算符计算按位与运算<br>方法：运用德·摩根定律：非(P 且 Q) = (非 P) 或 (非 Q)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int bitAnd(int x, int y) &#123;</div><div class="line">  return ~((~x) | (~y));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="getByte-Extract-byte-n-from-word-x"><a href="#getByte-Extract-byte-n-from-word-x" class="headerlink" title="getByte - Extract byte n from word x"></a>getByte - Extract byte n from word x</h2><p>目标：提取一个字中的特定一个字节<br>方法：将字向右移位到最低字节，再与0xff按位与得到目标字节</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int getByte(int x, int n) &#123;</div><div class="line">  return (x &gt;&gt; (n &lt;&lt; 3)) &amp; 0xff;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="logicalShift-shift-x-to-the-right-by-n-using-a-logical-shift"><a href="#logicalShift-shift-x-to-the-right-by-n-using-a-logical-shift" class="headerlink" title="logicalShift - shift x to the right by n, using a logical shift"></a>logicalShift - shift x to the right by n, using a logical shift</h2><p>目标：将x逻辑右移n位<br>方法：&gt;&gt;操作符是算术右移，故使用&gt;&gt;右移后，将高n位置零即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int logicalShift(int x, int n) &#123;</div><div class="line">  int mask = ~(1 &lt;&lt; 31);   // mask = 0x7fffffff</div><div class="line">  mask = mask &gt;&gt; n;</div><div class="line">  mask = mask &lt;&lt; 1;</div><div class="line">  mask = mask + 1;         // mask高n位为0，低位为1</div><div class="line">  return (x &gt;&gt; n) &amp; mask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="bitCount-returns-count-of-number-of-1’s-in-word"><a href="#bitCount-returns-count-of-number-of-1’s-in-word" class="headerlink" title="bitCount - returns count of number of 1’s in word"></a>bitCount - returns count of number of 1’s in word</h2><p>目标：计算x中有多少位1<br>方法：将x分为四个字节，分别计算1的数量（共计算八次），最后将结果分为四个字节计算总和即为最终答案</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">int bitCount(int x) &#123;</div><div class="line">  int result = 0;</div><div class="line">  int mask = 1 | (1 &lt;&lt; 8);</div><div class="line">  mask = mask | (mask &lt;&lt; 16);         // mask = 0x01010101</div><div class="line">  result = result + (x &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;1) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;2) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;3) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;4) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;5) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;6) &amp; mask);</div><div class="line">  result = result + ((x&gt;&gt;7) &amp; mask);  // result的每一个字节为x在这个字节上1的数量</div><div class="line">  return (result &amp; 0xff) + ((result&gt;&gt;8) &amp;0xff) + ((result&gt;&gt;16) &amp;0xff) + ((result&gt;&gt;24) &amp;0xff);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="bang-Compute-x-without-using"><a href="#bang-Compute-x-without-using" class="headerlink" title="bang - Compute !x without using !"></a>bang - Compute !x without using !</h2><p>目标：不使用!运算符计算!x<br>方法：将x与-x进行或运算，若x为0，最高位为0，反之最高位为1；将结果右移31位得到0xffffffff或0x00000000，加上1即为最终结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int bang(int x) &#123;</div><div class="line">  int tmp = ~x + 1;       // tmp = -x;</div><div class="line">  tmp = x | tmp;          // tmp = x | -x; 若x=0，最高位为0，反之最高位为1</div><div class="line">  return (tmp &gt;&gt; 31) + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="tmin-return-minimum-two’s-complement-integer"><a href="#tmin-return-minimum-two’s-complement-integer" class="headerlink" title="tmin - return minimum two’s complement integer"></a>tmin - return minimum two’s complement integer</h2><p>目标：求得二进制整数的最小值<br>方法：1左移31位即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int tmin(void) &#123;</div><div class="line">  return 1&lt;&lt;31;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="fitsBits-return-1-if-x-can-be-represented-as-an-n-bit-two’s-complement-integer"><a href="#fitsBits-return-1-if-x-can-be-represented-as-an-n-bit-two’s-complement-integer" class="headerlink" title="fitsBits - return 1 if x can be represented as an n-bit, two’s complement integer."></a>fitsBits - return 1 if x can be represented as an n-bit, two’s complement integer.</h2><p>目标：如果x能被n位二进制补码表示，则返回1<br>方法：如果x能被n位二进制表示，则x前(32-n)位都是相同的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int fitsBits(int x, int n) &#123;</div><div class="line">  return !((x &lt;&lt; (33 + ~n) &gt;&gt; (33 + ~n)) ^ x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="divpwr2-Compute-x-2-n-for-0-n-30"><a href="#divpwr2-Compute-x-2-n-for-0-n-30" class="headerlink" title="divpwr2 - Compute x/(2^n), for 0 ~ n ~ 30"></a>divpwr2 - Compute x/(2^n), for 0 ~ n ~ 30</h2><p>目标：计算 x/(2^n)<br>方法：对于正数，直接右移n位即可；对于负数，需要加上偏置量bias后右移</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int divpwr2(int x, int n) &#123;</div><div class="line">  int sign = x &gt;&gt; 31;        // 若x为负数，sign = 0xffffffff</div><div class="line">  int mask = (1 &lt;&lt; n) + ~0; // mask为0x0000ffff形式</div><div class="line">  int bias = sign &amp; mask;   // 若x为负数，bias有值</div><div class="line">  return (x + bias) &gt;&gt; n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="negate-return-x"><a href="#negate-return-x" class="headerlink" title="negate - return -x"></a>negate - return -x</h2><p>目标：求相反数<br>方法：补码取相反数，包含符号位一起取反再加一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int negate(int x) &#123;</div><div class="line">  return ~x + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="isPositive-return-1-if-x-gt-0-return-0-otherwise"><a href="#isPositive-return-1-if-x-gt-0-return-0-otherwise" class="headerlink" title="isPositive - return 1 if x &gt; 0, return 0 otherwise"></a>isPositive - return 1 if x &gt; 0, return 0 otherwise</h2><p>目标：判断x是否为正数<br>方法：直接通过x的符号位可以分出负数，再对x两次取非可以判断是否为0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int isPositive(int x) &#123;</div><div class="line">  return (!((x &gt;&gt; 31) &amp; 1) &amp; !!x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="isLessOrEqual-if-x-is-less-or-euqal-y-then-return-1-else-return-0"><a href="#isLessOrEqual-if-x-is-less-or-euqal-y-then-return-1-else-return-0" class="headerlink" title="isLessOrEqual - if x is less or euqal y then return 1, else return 0"></a>isLessOrEqual - if x is less or euqal y then return 1, else return 0</h2><p>目标：判断是否x &lt;= y<br>方法：当x与y异号时，只要x为负数，x&lt;=y；当x与y同号时，利用isPositive函数的方法判断y-x是否为正数或0即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int isLessOrEqual(int x, int y) &#123;</div><div class="line">  int signx = (x &gt;&gt; 31) &amp; 1;</div><div class="line">  int signy = (y &gt;&gt; 31) &amp; 1;</div><div class="line">  int sign = (signx ^ signy) &amp; signx;               	 // 异号</div><div class="line">  int tmp = y + ~x + 1;</div><div class="line">  tmp = (!((tmp &gt;&gt; 31) &amp; 1)) &amp; (!(signx ^ signy));  // 同号</div><div class="line">  return (sign | tmp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ilog2-return-floor-log-base-2-of-x-where-x-gt-0"><a href="#ilog2-return-floor-log-base-2-of-x-where-x-gt-0" class="headerlink" title="ilog2 - return floor(log base 2 of x), where x &gt; 0"></a>ilog2 - return floor(log base 2 of x), where x &gt; 0</h2><p>目标：求floor(log2x)<br>方法：通过二分法找到x中最高位1的位数，这个位数就是要求出的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int ilog2(int x) &#123;</div><div class="line">  int bits=0;</div><div class="line">  bits = (!!(x&gt;&gt;16))&lt;&lt;4;</div><div class="line">  bits = bits + ((!!(x&gt;&gt;(bits+8)))&lt;&lt;3);</div><div class="line">  bits = bits + ((!!(x&gt;&gt;(bits+4)))&lt;&lt;2);</div><div class="line">  bits = bits + ((!!(x&gt;&gt;(bits+2)))&lt;&lt;1);</div><div class="line">  bits = bits + (!!(x&gt;&gt;(bits+1)));</div><div class="line">  bits = bits + (!!bits)+(~0)+(!(1^x));</div><div class="line">  return bits;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="float-neg-Return-bit-level-equivalent-of-expression-f-for-floating-point-argument-f"><a href="#float-neg-Return-bit-level-equivalent-of-expression-f-for-floating-point-argument-f" class="headerlink" title="float_neg - Return bit-level equivalent of expression -f for floating point argument f"></a>float_neg - Return bit-level equivalent of expression -f for floating point argument f</h2><p>目标：将浮点数uf取反<br>方法：若uf不是NaN，直接将符号位取反，否则返回uf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">unsigned float_neg(unsigned uf) &#123;</div><div class="line">  unsigned result;</div><div class="line">  unsigned tmp;</div><div class="line">  result=uf ^ 0x80000000; //将符号位改反</div><div class="line">  tmp=uf &amp; (0x7fffffff);</div><div class="line">  if(tmp &gt; 0x7f800000)    //此时是NaN</div><div class="line">    result = uf;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="float-i2f-Return-bit-level-equivalent-of-expression-float-x"><a href="#float-i2f-Return-bit-level-equivalent-of-expression-float-x" class="headerlink" title="float_i2f - Return bit-level equivalent of expression (float) x"></a>float_i2f - Return bit-level equivalent of expression (float) x</h2><p>目标：返回整数x的对应的浮点数的二进制表示形式<br>方法：这是一个求阶码与尾数的过程</p>
<p>由于整数x一定是规格化数，故按照规格化标准转化；因为规格化的值尾数定义为M=1+f，故将x左移到最高一位1超出32位时，剩下的即为尾数；阶码是32减去上述转移的位数，故阶码字段值为127+32-shift</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">unsigned float_i2f(int x) &#123;</div><div class="line">  unsigned sign = 0;         // 符号位</div><div class="line">  unsigned exp;              // 阶码</div><div class="line">  unsigned frac;             // 尾数</div><div class="line">  unsigned shift = 0, tmp, rounding = 0;</div><div class="line"></div><div class="line">  if(x == 0) return x;       // 为0时直接返回0</div><div class="line">  if(x &lt; 0) &#123;</div><div class="line">    x = -x;</div><div class="line">    sign = 1;</div><div class="line">  &#125;                          // x取绝对值，记录符号位</div><div class="line">  frac = x;</div><div class="line">  while(1) &#123;</div><div class="line">    tmp = frac;</div><div class="line">    shift ++;</div><div class="line">    frac &lt;&lt;= 1;</div><div class="line">    if(tmp &amp; 0x80000000) break;</div><div class="line">  &#125;                          </div><div class="line">  exp = (159 - shift) &lt;&lt; 23; // 计算阶码</div><div class="line">  if((frac &amp; 0x1ff) &gt; 0x100) rounding = 1;        // 向上舍入</div><div class="line">  else if((frac &amp; 0x3ff) == 0x300) rounding = 1;  // 向上舍入</div><div class="line">  frac = (frac &gt;&gt; 9) + rounding; // 计算尾数</div><div class="line"></div><div class="line">  return (sign &lt;&lt; 31) + exp + frac;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="float-twice-Return-bit-level-equivalent-of-expression-2-f-for"><a href="#float-twice-Return-bit-level-equivalent-of-expression-2-f-for" class="headerlink" title="float_twice - Return bit-level equivalent of expression 2*f for"></a>float_twice - Return bit-level equivalent of expression 2*f for</h2><p>目标：返回浮点uf的两倍（以unsigned的形式）<br>方法：对于非规格化的数，uf的两倍等价于尾数左移一位，即小数字段左移移位；对于规格化的数，uf的两倍等价于阶码加一，即阶码字段加一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">unsigned float_twice(unsigned uf) &#123;</div><div class="line">  unsigned f = uf;</div><div class="line">  if ((f &amp; 0x7F800000) == 0) &#123;                  // 非规格化的</div><div class="line">    f = ((f &amp; 0x007FFFFF) &lt;&lt; 1) | (0x80000000 &amp; f);</div><div class="line">  &#125;</div><div class="line">  else if ((f &amp; 0x7F800000) != 0x7F800000) &#123;    // 规格化的</div><div class="line">    f = f + 0x00800000;</div><div class="line">  &#125;</div><div class="line">  return f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 计算机系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初次使用crontab工具]]></title>
      <url>http://xzjqx.data/2016/04/24/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8crontab%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<!-- Date: 2016-04-23 -->
<p>crontab是linux下的一个定时任务工具</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">usage:  crontab [-u user] file</div><div class="line">        crontab [-u user] [ -e | -l | -r ]</div><div class="line">                (default operation is replace, per 1003.2)</div><div class="line">        -e      (edit user&apos;s crontab)</div><div class="line">        -l      (list user&apos;s crontab)</div><div class="line">        -r      (delete user&apos;s crontab)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h3><p>crontab [-u username] [-l|-e|-r]<br>选项与参数：<br>-u  ：只有 root 才能进行这个任务，亦即帮其他使用者创建/移除 crontab 工作排程；<br>-e  ：编辑 crontab 的工作内容<br>-l  ：查阅 crontab 的工作内容<br>-r  ：移除所有的 crontab 的工作内容，若仅要移除一项，请用 -e 去编辑</p>
<h3 id="特殊符号使用"><a href="#特殊符号使用" class="headerlink" title="特殊符号使用"></a>特殊符号使用</h3><p>* ： 表示任何时刻<br>, ： 表示分割<br>－ ：表示一个段，如第二端里： 1-5，就表示1到5点<br>/n : 表示每个n的单位执行一次，如第二段里，*/1 , 就表示每隔1个小时执行一次命令。也可以写成1-23/1.</p>
<h3 id="一些实例"><a href="#一些实例" class="headerlink" title="一些实例"></a>一些实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">43 21 * * *              21:43 执行</div><div class="line">15 05 * * *              05:15 执行</div><div class="line">0 17 * * *               17:00 执行</div><div class="line">0 17 * * 1               每周一的 17:00 执行</div><div class="line">0,10 17 * * 0,2,3        每周日,周二,周三的 17:00和 17:10 执行</div><div class="line">0-10 17 1 * *            毎月1日从 17:00到7:10 毎隔1分钟 执行</div><div class="line">0 0 1,15 * 1             毎月1日和 15日和 一日的 0:00 执行</div><div class="line">42 4 1 * *               毎月1日的 4:42分 执行</div><div class="line">0 21 * * 1-6             周一到周六 21:00 执行</div><div class="line">0,10,20,30,40,50 * * * *  每隔10分 执行</div><div class="line">*/10 * * * *              每隔10分 执行</div><div class="line">* 1 * * *                 从1:0到1:59 每隔1分钟 执行</div><div class="line">0 1 * * *                 1:00 执行</div><div class="line">0 */1 * * *               毎时0分 每隔1小时 执行</div><div class="line">0 * * * *                 毎时0分 每隔1小时 执行</div><div class="line">2 8-20/3 * * *            8:02,11:02,14:02,17:02,20:02 执行</div><div class="line">30 5 1,15 * *             1日 和 15日的 5:30 执行</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> crontab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python登录学校OJ爬取AC代码]]></title>
      <url>http://xzjqx.data/2016/04/13/Python%E7%99%BB%E5%BD%95%E5%AD%A6%E6%A0%A1OJ%E7%88%AC%E5%8F%96AC%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>最近持续学习python中，真是学到深处越来越爱上这门语言了，她“优雅”、“明确”、“简单”的特性深深的吸引了我。<br>真是太能扯了，屌丝果然只能<del>爱上</del>语言了.<br>我在这介绍一部简单易懂的Python教程——<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013747381369301852037f35874be2b85aa318aad57bda000" target="_blank" rel="external">Python2</a>,<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python3</a></p>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>之前用Python爬取了Toj的题目主干——<a href="">简单Python爬虫练习</a>，并以此作为Python爬虫的入门实验，待我Python能力有所长进后，就想到或许可以使用Python把自己之前提交的AC代码全部爬下来，这也许会很有趣。<br>没错，博主就是天津大学的在校本科生~<br><a id="more"></a></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先我们需要分析一下要爬取的网站架构，这是<a href="http://acm.tju.edu.cn/toj/" target="_blank" rel="external">TOJ主页</a></p>
<h2 id="查找AC提交"><a href="#查找AC提交" class="headerlink" title="查找AC提交"></a>查找AC提交</h2><p>Toj是靠Run ID来区分所有的提交的，所以我们想要找到自己的AC代码，只需要把自己的AC提交ID记录下来即可<br>在<a href="http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=xxx" target="_blank" rel="external">http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=xxx</a> 上记录了username为xxx的提交人的AC提交，使用浏览器的审查功能可以看到截图：<br><img src="http://7xo385.com1.z0.glb.clouddn.com/UQA30R%7D%5D9~XMMFKTQ%29%5DBJYK.png" alt=""><br>看上图两个方框圈起来的地方是对应的，这里的Run ID就是我们要找的东西</p>
<h2 id="爬取准备"><a href="#爬取准备" class="headerlink" title="爬取准备"></a>爬取准备</h2><p>找完所有的AC提交ID，我们就可以开始爬取对应代码了<br>点击上图中code尺寸的链接就会进入一个密码验证界面——<a href="http://acm.tju.edu.cn/toj/show_open.php?sid=1591405" target="_blank" rel="external">http://acm.tju.edu.cn/toj/show_open.php?sid=1591405</a><br>这里的sid就是你打开的代码对应的Run ID<br>输入密码验证成功后就会进入有AC代码的页面，在审查中打开Network属性可以看到下面的结果：<br><img src="http://7xo385.com1.z0.glb.clouddn.com/@G0W12M~C5~%7D414_LS5%5DQ~8.png" alt=""><br>这里最重要的信息是：</p>
<ul>
<li>Request URL:</li>
<li>user_id:</li>
<li>sid:1591405</li>
<li>passwd:<br>请求的URL为<a href="http://acm.tju.edu.cn/toj/show_code.php，表单提交的数据有user_id,sid,passwd" target="_blank" rel="external">http://acm.tju.edu.cn/toj/show_code.php，表单提交的数据有user_id,sid,passwd</a><br>知道这些我们就可以完成上面的密码验证过程了<br>最后查看该页面的html代码就可以爬下你的AC代码了</li>
</ul>
<h1 id="码代码"><a href="#码代码" class="headerlink" title="码代码"></a>码代码</h1><h2 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h2><p>首先看看我用到的所有模块吧<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> getpass <span class="comment">#实现不回显输入密码</span></div><div class="line"><span class="keyword">import</span> urllib  </div><div class="line"><span class="keyword">import</span> urllib2 <span class="comment">#这两个是爬虫用的经典库</span></div><div class="line"><span class="keyword">import</span> bs4     <span class="comment">#提取并分析HTML内容的工具</span></div><div class="line"><span class="keyword">import</span> os      <span class="comment">#操作系统相关工具</span></div></pre></td></tr></table></figure></p>
<h2 id="获取AC提交ID"><a href="#获取AC提交ID" class="headerlink" title="获取AC提交ID"></a>获取AC提交ID</h2><p>按照上面的准备过程，首先我们要找到自己的AC提交ID：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRunId</span><span class="params">(user_id, sid_url, run_id)</span>:</span></div><div class="line">    request = urllib2.Request(sid_url)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    tr = soup.select(<span class="string">'tr[height="30"]'</span>) <span class="comment">#按照此属性选择标签</span></div><div class="line">    <span class="keyword">if</span> len(tr) &gt; <span class="number">0</span>: <span class="comment">#如果标签数不为0，则继续查找下一页</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> tr:</div><div class="line">            run_id.append(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">            y = (int)(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">        sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?user=%s&amp;accept=1&amp;start=%d"</span> %(user_id,y<span class="number">-1</span>)</div><div class="line">        getRunId(user_id, sid_url, run_id)</div><div class="line">    <span class="keyword">return</span> run_id</div></pre></td></tr></table></figure></p>
<p>这里用到bs4下的BeautifulSoup工具完成了对HTML文档的解析，从中我们找到了所有的AC提交ID</p>
<h2 id="获取AC代码"><a href="#获取AC代码" class="headerlink" title="获取AC代码"></a>获取AC代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Printing All Your AC Codes...'</span></div><div class="line"><span class="keyword">for</span> sid <span class="keyword">in</span> run_id:</div><div class="line">    url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">    values = &#123;</div><div class="line">        <span class="string">"user_id"</span> : user_id,</div><div class="line">        <span class="string">"sid"</span> : sid,</div><div class="line">        <span class="string">"passwd"</span> : passwd</div><div class="line">    &#125;</div><div class="line">    data = urllib.urlencode(values)</div><div class="line">    request = urllib2.Request(url,data)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    pid = soup.select(<span class="string">'a'</span>)[<span class="number">8</span>].get_text()</div><div class="line">    code = soup.select(<span class="string">'pre'</span>)[<span class="number">0</span>].get_text().encode(<span class="string">'utf-8'</span>)</div><div class="line">    fo = open(to_dir + <span class="string">'\\'</span> + pid + <span class="string">u'.cpp'</span>, <span class="string">"wb"</span>)</div><div class="line">    fo.write(code)</div></pre></td></tr></table></figure>
<p>说明一下，这里模拟了登录验证密码的过程，也就是之前提到的表单提交<br>与此同时，我们还把AC代码提取出来并保存在本地了，看看下面的截图你就能明白是如何提取的了<br><img src="http://7xo385.com1.z0.glb.clouddn.com/%29%29X39Y@%7DDCR%5BOMREX%25D~2%7B1.png" alt=""></p>
<h2 id="输入账号密码和代码保存目录"><a href="#输入账号密码和代码保存目录" class="headerlink" title="输入账号密码和代码保存目录"></a>输入账号密码和代码保存目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Username: '</span>,</div><div class="line">user_id = raw_input()</div><div class="line">passwd = getpass.getpass(<span class="string">'Please Input Your Password: '</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Target Directory: '</span>,</div><div class="line">to_dir = raw_input()</div><div class="line"></div><div class="line"><span class="comment">#Verify Your Username</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Username...'</span>,</div><div class="line">sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=%s"</span> % (user_id)</div><div class="line">request = urllib2.Request(sid_url)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">tr = soup.select(<span class="string">'tr[height="30"]'</span>)</div><div class="line"><span class="keyword">if</span> len(tr) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"No Such User"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nDone!'</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Finding Your AC Run Id...'</span></div><div class="line">    run_id = getRunId(user_id, sid_url, [])</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your Password</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Password...'</span>,</div><div class="line">url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">sid = tr[<span class="number">0</span>].get_text()[<span class="number">0</span>:<span class="number">7</span>]</div><div class="line">values = &#123;</div><div class="line">    <span class="string">"user_id"</span> : user_id,</div><div class="line">    <span class="string">"sid"</span> : sid,</div><div class="line">    <span class="string">"passwd"</span> : passwd</div><div class="line">&#125;</div><div class="line">data = urllib.urlencode(values)</div><div class="line">request = urllib2.Request(url,data)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">s = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'ignore'</span>)</div><div class="line"><span class="keyword">if</span> s.find(<span class="string">"Password Error!"</span>) != <span class="number">-1</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"Password Error!"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your to_dir</span></div><div class="line"><span class="keyword">if</span> os.path.exists(to_dir) <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">    os.mkdir(to_dir)</div></pre></td></tr></table></figure>
<p>这里的过程基本上大家都明白了吧，我只是使用了Python自带的raise语句抛出一个错误，达到验证账号密码是否正确的目的</p>
<h1 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> getpass</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> bs4</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRunId</span><span class="params">(user_id, sid_url, run_id)</span>:</span></div><div class="line">    request = urllib2.Request(sid_url)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    tr = soup.select(<span class="string">'tr[height="30"]'</span>)</div><div class="line">    <span class="keyword">if</span> len(tr) &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> tr:</div><div class="line">            run_id.append(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">            y = (int)(x.get_text()[<span class="number">0</span>:<span class="number">7</span>])</div><div class="line">        sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?user=%s&amp;accept=1&amp;start=%d"</span> %(user_id,y<span class="number">-1</span>)</div><div class="line">        getRunId(user_id, sid_url, run_id)</div><div class="line">    <span class="keyword">return</span> run_id</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Username: '</span>,</div><div class="line">user_id = raw_input()</div><div class="line">passwd = getpass.getpass(<span class="string">'Please Input Your Password: '</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Please Input Your Target Directory: '</span>,</div><div class="line">to_dir = raw_input()</div><div class="line"></div><div class="line"><span class="comment">#Verify Your Username</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Username...'</span>,</div><div class="line">sid_url = <span class="string">"http://acm.tju.edu.cn/toj/status.php?accept=1&amp;user=%s"</span> % (user_id)</div><div class="line">request = urllib2.Request(sid_url)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">tr = soup.select(<span class="string">'tr[height="30"]'</span>)</div><div class="line"><span class="keyword">if</span> len(tr) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"No Such User"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nDone!'</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Finding Your AC Run Id...'</span></div><div class="line">    run_id = getRunId(user_id, sid_url, [])</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your Password</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Verifying Your Password...'</span>,</div><div class="line">url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">sid = tr[<span class="number">0</span>].get_text()[<span class="number">0</span>:<span class="number">7</span>]</div><div class="line">values = &#123;</div><div class="line">    <span class="string">"user_id"</span> : user_id,</div><div class="line">    <span class="string">"sid"</span> : sid,</div><div class="line">    <span class="string">"passwd"</span> : passwd</div><div class="line">&#125;</div><div class="line">data = urllib.urlencode(values)</div><div class="line">request = urllib2.Request(url,data)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line">s = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'ignore'</span>)</div><div class="line"><span class="keyword">if</span> s.find(<span class="string">"Password Error!"</span>) != <span class="number">-1</span>:</div><div class="line">    <span class="keyword">raise</span> Exception (<span class="string">"Password Error!"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Done!'</span></div><div class="line"></div><div class="line"><span class="comment">#Verify Your to_dir</span></div><div class="line"><span class="keyword">if</span> os.path.exists(to_dir) <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">    os.mkdir(to_dir)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Printing All Your AC Codes...'</span></div><div class="line"><span class="keyword">for</span> sid <span class="keyword">in</span> run_id:</div><div class="line">    url = <span class="string">"http://acm.tju.edu.cn/toj/show_code.php"</span></div><div class="line">    values = &#123;</div><div class="line">        <span class="string">"user_id"</span> : user_id,</div><div class="line">        <span class="string">"sid"</span> : sid,</div><div class="line">        <span class="string">"passwd"</span> : passwd</div><div class="line">    &#125;</div><div class="line">    data = urllib.urlencode(values)</div><div class="line">    request = urllib2.Request(url,data)</div><div class="line">    response = urllib2.urlopen(request)</div><div class="line">    soup = bs4.BeautifulSoup(response.read(), <span class="string">"lxml"</span>)</div><div class="line">    pid = soup.select(<span class="string">'a'</span>)[<span class="number">8</span>].get_text()</div><div class="line">    code = soup.select(<span class="string">'pre'</span>)[<span class="number">0</span>].get_text().encode(<span class="string">'utf-8'</span>)</div><div class="line">    fo = open(to_dir + <span class="string">'\\'</span> + pid + <span class="string">u'.cpp'</span>, <span class="string">"wb"</span>)</div><div class="line">    fo.write(code)</div></pre></td></tr></table></figure>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>Follow 我的<a href="https://github.com/xzjqx/python-study" target="_blank" rel="external">Python学习项目</a>吧，大家一起进步</p>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[U盘备份的Python小程序]]></title>
      <url>http://xzjqx.data/2016/04/07/Python%E5%AE%9E%E7%8E%B0U%E7%9B%98%E5%A4%87%E4%BB%BD%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>前几天去学校机房做实验，U盘果然又被机房电脑玷污了，又只能格式化了（衰~）<br>思考解决办法，想着如果每当电脑插入U盘，就自动备份U盘里的文件就好了</p>
<h1 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h1><p>想到就做吧，正好这几天在学习Python，那就用python来实现这个小脚本吧<br><a id="more"></a></p>
<h2 id="Python源码"><a href="#Python源码" class="headerlink" title="Python源码"></a>Python源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">import</span> zipfile</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZIP_DEFLATED</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFileList</span><span class="params">(dir, fileList)</span>:</span></div><div class="line">    newDir = dir</div><div class="line">    <span class="keyword">if</span> os.path.isfile(dir):</div><div class="line">        fileList.append(dir)</div><div class="line">    <span class="keyword">elif</span> os.path.isdir(dir):</div><div class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> os.listdir(dir):</div><div class="line">            <span class="keyword">if</span> s == <span class="string">"System Volume Information"</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            newDir = os.path.join(dir, s)</div><div class="line">            GetFileList(newDir, fileList)</div><div class="line">    <span class="keyword">return</span> fileList</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">backup</span><span class="params">(filepath)</span>:</span></div><div class="line"></div><div class="line">    from_dir = []</div><div class="line">    <span class="comment"># print from_dir</span></div><div class="line">    from_dir = <span class="string">'G:\\'</span></div><div class="line">    <span class="comment"># backup_time</span></div><div class="line">    back_time = time.strftime(<span class="string">u'%Y-%m-%d'</span>)</div><div class="line"></div><div class="line">    to_dir = filepath + <span class="string">u':\\backup'</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(to_dir):</div><div class="line">        os.mkdir(to_dir)</div><div class="line">        <span class="keyword">print</span> <span class="string">u'Completely New Folder.'</span></div><div class="line">    os.chdir(to_dir)</div><div class="line"></div><div class="line">    target = back_time + <span class="string">u'.zip'</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target):</div><div class="line">        zip = zipfile.ZipFile(target, <span class="string">'a'</span>, ZIP_DEFLATED)</div><div class="line">        file = GetFileList(from_dir, [])</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> file:</div><div class="line">            zip.write(f)</div><div class="line">        <span class="keyword">print</span> <span class="string">u'Done.'</span></div><div class="line">        zip.close()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">u'Having Backups.'</span></div><div class="line"></div><div class="line">    os.chdir(to_dir)</div><div class="line">    list_file = os.listdir(to_dir)</div><div class="line"></div><div class="line">    old_time = datetime.date.today() - datetime.timedelta(<span class="number">30</span>)</div><div class="line">    <span class="comment"># print str(old_time)[5:7]</span></div><div class="line">    <span class="keyword">for</span> lis <span class="keyword">in</span> list_file:</div><div class="line">        <span class="keyword">if</span> lis[<span class="number">5</span>:<span class="number">7</span>] == str(old_time)[<span class="number">5</span>:<span class="number">7</span>]:</div><div class="line">            os.remove(lis)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'G:'</span>) == <span class="keyword">True</span>:</div><div class="line">        backup(<span class="string">'D'</span>)</div></pre></td></tr></table></figure>
<h2 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h2><p>上述源码中定义了两个函数：</p>
<ul>
<li>GetFileList(dir, fileList): 返回dir下的所有目录和文件</li>
<li>backup(filepath): 将U盘下的所有文件以日期命名打包，并放在filepath下的backup目录下</li>
</ul>
<h2 id="可改进的地方"><a href="#可改进的地方" class="headerlink" title="可改进的地方"></a>可改进的地方</h2><p>本来的想法是当插入U盘是即可自动执行备份操作，但是才知道Windows已经禁用了U盘的自动播放，故没有实现这一功能<br>后来想到，或许可以在电脑上设计一个定时打开的任务，当它打开时如果电脑插着U盘就备份，这样应该也能做到自动备份的效果，有空再做吧<br>自己还是太年轻啊，这些很简单的操作都不会[哭脸]</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>Follow 我的<a href="https://github.com/xzjqx/python-study" target="_blank" rel="external">Python学习项目</a>吧，大家一起进步</p>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】Atom快捷操作和插件推荐]]></title>
      <url>http://xzjqx.data/2016/03/31/%E3%80%90%E8%BD%AC%E3%80%91Atom%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C%E5%92%8C%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<!-- Title: 【转】Atom快捷操作和插件推荐 Date: 2016年03月31日 -->
<p>原文查看：<a href="https://github.com/futantan/atom" target="_blank" rel="external">atom 快捷键 shortcuts</a></p>
<h2 id="文件切换"><a href="#文件切换" class="headerlink" title="文件切换"></a>文件切换</h2><p><code>ctrl-shift-s</code>  保存所有打开的文件<br><code>cmd-shift-o</code>  打开目录<br><code>cmd-\</code>   显示或隐藏目录树<br><code>ctrl-0</code>   焦点移到目录树<br>目录树下，使用a，m，delete来增加，修改和删除<br><code>cmd-t</code>或<code>cmd-p</code> 查找文件<br><code>cmd-b</code> 在打开的文件之间切换<br><code>cmd-shift-b</code> 只搜索从上次git commit后修改或者新增的文件<br><a id="more"></a></p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>（等价于上下左右）<br><code>ctrl-p</code> 前一行<br><code>ctrl-n</code> 后一行<br><code>ctrl-f</code> 前一个字符<br><code>ctrl-b</code> 后一个字符</p>
<p><code>alt-B</code>, <code>alt-left</code> 移动到单词开始<br><code>alt-F</code>, <code>alt-right</code> 移动到单词末尾</p>
<p><code>cmd-right</code>, <code>ctrl-E</code> 移动到一行结束<br><code>cmd-left</code>, <code>ctrl-A</code>  移动到一行开始</p>
<p><code>cmd-up</code> 移动到文件开始<br><code>cmd-down</code> 移动到文件结束</p>
<p><code>ctrl-g</code> 移动到指定行 row:column 处</p>
<p><code>cmd-r</code> 在方法之间跳转</p>
<h2 id="目录树操作"><a href="#目录树操作" class="headerlink" title="目录树操作"></a>目录树操作</h2><p><code>cmd-\</code> 或者 <code>cmd-k cmd-b</code> 显示(隐藏)目录树<br><code>ctrl-0</code> 焦点切换到目录树(再按一次或者<code>Esc</code>退出目录树)<br><code>a</code> 添加文件<br><code>d</code> 将当前文件另存为(duplicate)<br><code>i</code> 显示(隐藏)版本控制忽略的文件<br><code>alt-right</code> 和 <code>alt-left</code> 展开(隐藏)所有目录<br><code>ctrl-al-]</code> 和 <code>ctrl-al-[</code> 同上<br><code>ctrl-[</code> 和 <code>ctrl-]</code> 展开(隐藏)当前目录<br><code>ctrl-f</code> 和 <code>ctrl-b</code> 同上<br><code>cmd-k h</code> 或者 <code>cmd-k left</code> 在左半视图中打开文件<br><code>cmd-k j</code> 或者 <code>cmd-k down</code> 在下半视图中打开文件<br><code>cmd-k k</code> 或者 <code>cmd-k up</code> 在上半视图中打开文件<br><code>cmd-k l</code> 或者 <code>cmd-k right</code> 在右半视图中打开文件<br><code>ctrl-shift-C</code> 复制当前文件绝对路径</p>
<h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p><code>cmd-F2</code> 在本行增加书签<br><code>F2</code> 跳到当前文件的下一条书签<br><code>shift-F2</code> 跳到当前文件的上一条书签<br><code>ctrl-F2</code> 列出当前工程所有书签</p>
<h2 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h2><blockquote>
<p>大部分和导航一致，只不过加上shift</p>
</blockquote>
<p><code>ctrl-shift-P</code>  选取至上一行<br><code>ctrl-shift-N</code>  选取至下一样<br><code>ctrl-shift-B</code>  选取至前一个字符<br><code>ctrl-shift-F</code>  选取至后一个字符<br><code>alt-shift-B</code>, <code>alt-shift-left</code>  选取至字符开始<br><code>alt-shift-F</code>, <code>alt-shift-right</code>  选取至字符结束<br><code>ctrl-shift-E</code>, <code>cmd-shift-right</code>  选取至本行结束<br><code>ctrl-shift-A</code>, <code>cmd-shift-left</code>  选取至本行开始<br><code>cmd-shift-up</code>  选取至文件开始<br><code>cmd-shift-down</code>  选取至文件结尾<br><code>cmd-A</code>  全选<br><code>cmd-L</code>  选取一行，继续按回选取下一行<br><code>ctrl-shift-W</code>  选取当前单词</p>
<h2 id="编辑和删除文本"><a href="#编辑和删除文本" class="headerlink" title="编辑和删除文本"></a>编辑和删除文本</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><code>ctrl-T</code> 使光标前后字符交换<br><code>cmd-J</code> 将下一行与当前行合并<br><code>ctrl-cmd-up</code>, <code>ctrl-cmd-down</code> 使当前行向上或者向下移动<br><code>cmd-shift-D</code> 复制当前行到下一行<br><code>cmd-K</code>, <code>cmd-U</code> 使当前字符大写<br><code>cmd-K</code>, <code>cmd-L</code> 使当前字符小写</p>
<h3 id="删除和剪切"><a href="#删除和剪切" class="headerlink" title="删除和剪切"></a>删除和剪切</h3><p><code>ctrl-shift-K</code> 删除当前行<br><code>cmd-backspace</code> 删除到当前行开始<br><code>cmd-fn-backspace</code> 删除到当前行结束<br><code>ctrl-K</code> 剪切到当前行结束<br><code>alt-backspace</code> 或 <code>alt-H</code> 删除到当前单词开始<br><code>alt-delete</code> 或 <code>alt-D</code> 删除到当前单词结束</p>
<h3 id="多光标和多处选取"><a href="#多光标和多处选取" class="headerlink" title="多光标和多处选取"></a>多光标和多处选取</h3><p><code>cmd-click</code> 增加新光标<br><code>cmd-shift-L</code> 将多行选取改为多行光标<br><code>ctrl-shift-up</code>, <code>ctrl-shift-down</code> 增加上（下）一行光标<br><code>cmd-D</code> 选取文档中和当前单词相同的下一处<br><code>ctrl-cmd-G</code> 选取文档中所有和当前光标单词相同的位置</p>
<h3 id="括号跳转"><a href="#括号跳转" class="headerlink" title="括号跳转"></a>括号跳转</h3><p><code>ctrl-m</code> 相应括号之间，html tag之间等跳转<br><code>ctrl-cmd-m</code> 括号(tag)之间文本选取<br><code>alt-cmd-.</code> 关闭当前XML/HTML tag</p>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p><code>ctrl-shift-U</code> 调出切换编码选项</p>
<h2 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h2><p><code>cmd-F</code> 在buffer中查找<br><code>cmd-shift-f</code> 在整个工程中查找</p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p><code>alt-shift-S</code> 查看当前可用代码片段</p>
<blockquote>
<p>在<code>~/.atom</code>目录下<code>snippets.cson</code>文件中存放了你定制的snippets</p>
</blockquote>
<p><a href="https://atom.io/docs/v1.0.0/using-atom-snippets" target="_blank" rel="external">定制说明</a></p>
<h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p><code>ctrl-space</code> 提示补全信息</p>
<h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p><code>alt-cmd-[</code> 折叠<br><code>alt-cmd-]</code> 展开<br><code>alt-cmd-shift-{</code> 折叠全部<br><code>alt-cmd-shift-}</code> 展开全部<br><code>cmd-k cmd-N</code> 指定折叠层级 N为层级数</p>
<h2 id="文件语法高亮"><a href="#文件语法高亮" class="headerlink" title="文件语法高亮"></a>文件语法高亮</h2><p><code>ctrl-shift-L</code> 选择文本类型</p>
<h2 id="使用Atom进行写作"><a href="#使用Atom进行写作" class="headerlink" title="使用Atom进行写作"></a>使用Atom进行写作</h2><p><code>ctrl-shift-M</code> Markdown预览<br>可用代码片段</p>
<blockquote>
<p>b, legal, img, l, i, code, t, table</p>
</blockquote>
<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><p><code>cmd-alt-Z</code> checkout HEAD 版本<br><code>cmd-shift-B</code> 弹出untracked 和 modified文件列表<br><code>alt-g down</code> <code>alt-g up</code> 在修改处跳转<br><code>alt-G D</code> 弹出diff列表<br><code>alt-G O</code> 在github上打开文件<br><code>alt-G G</code> 在github上打开项目地址<br><code>alt-G B</code> 在github上打开文件blame<br><code>alt-G H</code> 在github上打开文件history<br><code>alt-G I</code> 在github上打开issues<br><code>alt-G R</code> 在github打开分支比较<br><code>alt-G C</code> 拷贝当前文件在gihub上的网址</p>
<h2 id="推荐一些好用的插件"><a href="#推荐一些好用的插件" class="headerlink" title="推荐一些好用的插件"></a>推荐一些好用的插件</h2><ul>
<li>主题<br><a href="https://atom.io/themes/atom-material-ui" target="_blank" rel="external">atom-material-ui</a> 好看到爆<br><a href="https://atom.io/themes/atom-material-syntax" target="_blank" rel="external">atom-material-syntax</a></li>
<li>美化<br><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a> 一键代码美化<br><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a> 给文件加上好看的图标<br><a href="https://atom.io/users/atom-minimap" target="_blank" rel="external">atom-minimap</a> 方便美观的缩略滚动图</li>
<li>git<br><a href="https://atom.io/packages/atomatigit" target="_blank" rel="external">atomatigit</a> 可视化git操作</li>
<li>代码提示<br><a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a> 这个不用介绍了吧<br><a href="https://atom.io/packages/atom-ternjs" target="_blank" rel="external">atom-ternjs</a> js代码提示很强大，高度定制化<br><a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblockr</a> jsdoc 给js添加注释<br><a href="https://atom.io/packages/autoclose-html" target="_blank" rel="external">autoclose-html</a> 闭合html标签<br><a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a> 取色器 必备插件<br><a href="https://atom.io/packages/pigments" target="_blank" rel="external">pigments</a> 颜色显示插件 必装<br><a href="https://atom.io/packages/terminal-panel" target="_blank" rel="external">terminal-panel</a> 直接在atom里面写命令了<br><a href="https://atom.io/packages/svg-preview" target="_blank" rel="external">svg-preview</a> svg预览</li>
<li>便捷操作<br><a href="https://atom.io/packages/advanced-open-file" target="_blank" rel="external">advanced-open-file</a> 快速打开、切换文件</li>
</ul>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Atom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单Python爬虫练习]]></title>
      <url>http://xzjqx.data/2016/03/27/python-test/</url>
      <content type="html"><![CDATA[<!-- Title: 简单Python爬虫练习 Date: 2016年03月27日 -->
<p>最近开始学习Python的爬虫，在这里做一个记录</p>
<p>首先，我读了一些简单的Python爬虫源码，然后通过入门教程理解代码的意义（这里有一个比较好的入门教程——–<a href="http://wuchong.me/blog/2014/04/24/easy-web-scraping-with-python/" target="_blank" rel="external">使用 Python 轻松抓取网页</a>），最后自己动手写了一个小的爬虫程序。<br><a id="more"></a><br>我的爬虫测试程序源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> bs4</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">root_url = <span class="string">'http://acm.tju.edu.cn/toj/'</span></div><div class="line">pageNum = <span class="number">100</span></div><div class="line">result = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1001</span>,pageNum+<span class="number">1001</span>):</div><div class="line">    index_url = root_url + <span class="string">'showp%d.html'</span>%(page)</div><div class="line">    response = requests.get(index_url)</div><div class="line">    soup = bs4.BeautifulSoup(response.text,<span class="string">'lxml'</span>)</div><div class="line"></div><div class="line">    problem = soup.select(<span class="string">'#problem'</span>)[<span class="number">0</span>].get_text()</div><div class="line">    fo = open(<span class="string">"/mydata/python_test/toj/problem%d"</span>%page, <span class="string">"wb"</span>)</div><div class="line">    fo.write(problem)</div></pre></td></tr></table></figure></p>
<p>这里我记录一下上述代码的意思： 这是一个爬取TOJ网站题目主干的小程序     首先使用requests来加载一个<a href="http://acm.tju.edu.cn/toj/showp1001.html" target="_blank" rel="external"> web 页面</a> 查看该网页的源代码中与题目内容有关的部分如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"+2"</span>&gt;</span>1001.<span class="tag">&lt;/<span class="name">font</span>&gt;</span> &amp;nbsp;</div><div class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"+2"</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"problem"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>center标签的前两个font标签分别记录了题目编号和题目标题<br>div标签的problem类记录了题目内容，我通过 BeautifulSoup 使用 CSS 选择器抽取他们的文本<br>最终加入problem串中，写入文件</p>
<p>上面就完成了对一个页面题目内容的提取，只需循环处理你想要的页面即可</p>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为小y更换固态硬盘]]></title>
      <url>http://xzjqx.data/2016/03/14/Swap-SSD/</url>
      <content type="html"><![CDATA[<!--
Title: 为小y更换固态硬盘
Date: 2015年03月14日
-->
<p>前天心情一激动就在某东剁手买了一块SSD，昨天就到了（<del>不得不说某东的物流真不错</del>）<br>既然固态已经来了，那就大刀阔斧的开始动工吧。。。</p>
<a id="more"></a>
<p><img src="http://ww4.sinaimg.cn/bmiddle/5da56583jw1f1vmb4zdhfj21w02ioqv5.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/bmiddle/5da56583jw1f1vn0uaze6j21w02ioqv5.jpg" alt=""><br>完工。。。过程比较曲折，这里就不赘述了，贴上宝贝的链接–<a href="http://item.jd.com/2010277.html" target="_blank" rel="external">SSD</a>和<a href="http://item.jd.com/1386945.html" target="_blank" rel="external">光驱托架</a></p>
<p>我是把SSD放在原机械的位置，把机械拆下来放在光驱上了，这样做是防止光驱位的接口不是SATA3的而影响固态的速度</p>]]></content>
      
        <categories>
            
            <category> 随笔文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SSD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LNMP中二级域名指向网站子目录]]></title>
      <url>http://xzjqx.data/2015/12/29/lnmp-sld-to-sondir/</url>
      <content type="html"><![CDATA[<!--
Title: LNMP中二级域名指向网站子目录
date: 2015年12月29日
-->
<p>最近真的比较闲啊，又开始折腾域名二服务器的事情了，下面就是过程</p>
<h2 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a><strong>二级域名</strong></h2><p>用下面这个例子帮助我们清晰的分清楚顶级域名、以及域名、二级域名：</p>
<ul>
<li>.com顶级域名</li>
<li>baidu .com 一级域名</li>
<li>www.baidu .com 二级域名</li>
<li>bbs.baidu .com 二级域名</li>
<li>tieba.baidu .com 二级域名<a id="more"></a>
<h2 id="网站子目录"><a href="#网站子目录" class="headerlink" title="网站子目录"></a><strong>网站子目录</strong></h2>我们可能会希望在自己的服务器上搭建多个网站，这时候如果把所有的网站文件都放在一个目录下，可能会造成一些冲突或<del>强迫症</del>？（我是后者多一点）<br>那这个时候我们就希望在一个文件夹里保存一个网站了，这就需要一个网站子目录了。</li>
</ul>
<p>可是这时候又有一个新的问题了，当我们想访问这个子目录是或许会是这样<strong>xxxx.cn/xx</strong>或是IP/xx这样<br>不管怎样都要输入繁琐的子目录名，这样是不是很麻烦。但是如果能让二级域名指向这个就行了，比如使用xx.xxxx.cn访问该子目录的网站，这样是不是很方便了</p>
<h2 id="二级域名指向子目录"><a href="#二级域名指向子目录" class="headerlink" title="二级域名指向子目录"></a><strong>二级域名指向子目录</strong></h2><p>现在我们知道用二级域名指向子目录的重要性了吧。<br>由于我是使用LNMP一键安装包安装的，所以下面的方法也是建立在LNMP上的，不一样的请右转百度。</p>
<p>首先在你的域名服务商添加一条解析记录，使用A记录即可，我的如下：<br><img src="http://7xo385.com1.z0.glb.clouddn.com/ng_A.png" alt="A记录"></p>
<p>之后就需要在服务器端做修改了：<br>首先进入nginx的配置文件目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nginx/conf/vhost</div></pre></td></tr></table></figure></p>
<p>如果之前已经通过LNMP搭好了自己的主域名网站（即使用vhost.sh脚本设置域名及默认文件夹，具体可看我的这篇文章<a href="http://xzjqx.cn/2015/12/23/build-wordpress/" target="_blank" rel="external">云服务器搭建WordPress个人博客系统</a>），这时<strong>vhost</strong>目录下会存在一个以“默认一级域名.conf”为名称的配置文件，我的就是<strong>xzjqx.cn.conf</strong></p>
<p>这时仿照一级域名的配置文件，我们新建一个二级域名的配置文件，我的例子如下：<br>文件名：ng.xzjqx.cn.conf<br>内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name ng.xzjqx.cn;</div><div class="line">    index index.html index.htm index.php;</div><div class="line">    root /home/wwwroot/default/nginx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中server_name后填入你的二级域名，root后填入网站子目录</p>
<p>最后重启您先服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>
<p>这样我们就能开开心心的使用指向二级域名访问网站子目录了<br>这是我上面所用的例子：<a href="ng.xzjqx.cn">ng.xzjqx.cn</a><br>这是LNMP安装完成后的默认主页</p>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LNMP </tag>
            
            <tag> 二级域名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Sublime直接编译运行C/C++源文件]]></title>
      <url>http://xzjqx.data/2015/12/27/sublime-cfile/</url>
      <content type="html"><![CDATA[<!--
Title: 使用Sublime直接编译运行C/C++源文件
Date: 2015年12月27日
-->
<p>以前只知道Sublime是一个有个性的编辑器，最近才发现原来不仅仅是有个性的编译器。<br>今天就讲讲怎么直接在Sublime上编译执行C/C++源程序<br><a id="more"></a></p>
<h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a><strong>C语言</strong></h2><p>在菜单栏点击Tools-&gt;Build System-&gt;New Build System会打开一个名为<strong>untitled.sublime-build</strong>的文件，将下段代码复制进该文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;working_dir&quot;: &quot;$file_path&quot;,</div><div class="line">    &quot;cmd&quot;: &quot;gcc -Wall $file_name -o $file_base_name&quot;,</div><div class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</div><div class="line">    &quot;selector&quot;: &quot;source.c&quot;,</div><div class="line"></div><div class="line">    &quot;variants&quot;:</div><div class="line">    [</div><div class="line">        &#123;   </div><div class="line">        &quot;name&quot;: &quot;Run&quot;,</div><div class="line">            &quot;shell_cmd&quot;: &quot;gcc -Wall $file -o $file_base_name &amp;&amp; start cmd /c \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125; &amp; pause\&quot;&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后按<code>Ctrl+S</code>保存，打开一个User文件夹，说明保存为用户设置，可以修改名称为<strong>c.sublime-build</strong><br>最后在Tools-&gt;Build Sysrem下选择c选项即可</p>
<p><strong>使用</strong><br>打开一个c源文件，按下组合键<code>Ctrl+B</code>，第一次会弹出一个复选框，其中有<code>c</code>或<code>c - run</code>两项，点击第一项为编译，第二项为编译执行</p>
<p><strong>注意</strong><br>组合键<code>Ctrl+B</code>为打开上一次选择的编译选项<br>组合键<code>Ctrl+Shift+B</code>为打开选择框，可选两种编译选项</p>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h2><p>c++的配置与上述一致，只需将代码修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;encoding&quot;: &quot;utf-8&quot;,</div><div class="line">    &quot;working_dir&quot;: &quot;$file_path&quot;,</div><div class="line">    &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++0x $file_name -o $file_base_name&quot;,</div><div class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</div><div class="line">    &quot;selector&quot;: &quot;source.c++&quot;,</div><div class="line"></div><div class="line">    &quot;variants&quot;:</div><div class="line">    [</div><div class="line">        &#123;   </div><div class="line">        &quot;name&quot;: &quot;Run&quot;,</div><div class="line">            &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++0x $file -o $file_base_name &amp;&amp; start cmd /c \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125; &amp; pause\&quot;&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再将名字改为c++.sublime-build即可</p>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Sublime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建MineCraft私服]]></title>
      <url>http://xzjqx.data/2015/12/23/Minecraft-server/</url>
      <content type="html"><![CDATA[<!--
Title: 搭建MineCraft私服
Date: 2015年12月23日
-->
<p>最近购买了腾讯云的云主机，因为腾讯云最近在办活动——<a href="http://bbs.qcloud.com/thread-9953-1-1.html" target="_blank" rel="external">校园云+计划</a>，所以我只花了1软妹币/月就购进了一台CPU1核、内存1G、带宽1M、系统盘linux8G的云主机了，这无疑是给我们学生大大的福利啊（这个安利可以忽视）</p>
<p>拿到云主机后我首先做的就是<a href="http://xzjqx.cn/build-wordpress/" target="_blank" rel="external">搭建WordPress博客系统</a>，之后才想到搭建一个MineCraft的私人服务器，这样就可以几个小伙伴一起在自己的服务器上愉快的玩耍了。</p>
<p>由于我的服务器上已经有一个WordPress博客系统了，我担心云主机内存不够，所以就在室友买的另一个没用过的服务器上搭建MineCraft私服了。<br><a id="more"></a><br>闲话聊完，接下来就是重点了</p>
<h2 id="搭建过程简单分为以下几步"><a href="#搭建过程简单分为以下几步" class="headerlink" title="搭建过程简单分为以下几步"></a>搭建过程简单分为以下几步</h2><ul>
<li>安装JAVA环境</li>
<li>MineCraft服务器安装</li>
<li>MineCraft服务器配置</li>
<li>MineCraft客户端连接</li>
</ul>
<h3 id="安装JAVA环境"><a href="#安装JAVA环境" class="headerlink" title="安装JAVA环境"></a><strong>安装JAVA环境</strong></h3><p>直接使用命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install java</div></pre></td></tr></table></figure></p>
<p>安装完成，使用<strong>java -version</strong>查看java版本</p>
<h3 id="MineCraft服务器安装"><a href="#MineCraft服务器安装" class="headerlink" title="MineCraft服务器安装"></a><strong>MineCraft服务器安装</strong></h3><p>在<a href="http://pan.baidu.com/s/1jGVXBMm" target="_blank" rel="external">我的网盘</a>上下载<strong>Spigot</strong><br>密码：d8g2<br>将下载下来的文件上传到服务器的一个新建目录下，比如<strong>~/minecraft/</strong><br>使用下列命令启动<strong>Spigot</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar -Xmx512m -Xms512m -XX:MaxPermSize=256M -Dfile.encoding=utf-8 -Duser.timezone=Asia/Hong_Kong ~/minecraft/spigot.jar</div></pre></td></tr></table></figure></p>
<p>第一次启动时会自动生成一些配置文件，且会因为一个简单的原因自动关闭服务，这时只需修改生成的<strong>eula.txt</strong>文件，将其中的<strong>eula=false</strong>改为<strong>eula=true</strong>，然后重新启动服务即可。</p>
<h3 id="MineCraft服务器配置"><a href="#MineCraft服务器配置" class="headerlink" title="MineCraft服务器配置"></a><strong>MineCraft服务器配置</strong></h3><p>打开~/minecraft/目录下的配置文件<strong>server.properties</strong>，将其中的<strong>online-mode=true</strong>改为<strong>online-mode=false</strong>即可</p>
<h3 id="MineCraft客户端连接"><a href="#MineCraft客户端连接" class="headerlink" title="MineCraft客户端连接"></a><strong>MineCraft客户端连接</strong></h3><p>在网上下载同版本的MinCraft客户端，打开后进入多人游戏，选择直接连接，填上自己的主机IP即可连上游戏开始愉快的玩耍了。</p>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MineCraft </tag>
            
            <tag> 云服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu Server 安装gnome桌面]]></title>
      <url>http://xzjqx.data/2015/12/15/ubuntu-server-desktop/</url>
      <content type="html"><![CDATA[<!--
Title: Ubuntu Server 安装gnome桌面
Date: 2015年12月15日
-->
<p>上一篇博文提到修改<strong>Ubuntu Server</strong>的源列表到国内服务器中，接下来可以安装gnome桌面来试试</p>
<a id="more"></a>
<p>首先展示几张<strong>ubuntu-gnome-desktop</strong>的图片<br><img src="http://7xo385.com1.z0.glb.clouddn.com/gnome_sock.png" alt="gnome-sock"><br><!-- more --><br><img src="http://7xo385.com1.z0.glb.clouddn.com/gnome_login.png" alt="gnome-login"><br><img src="http://7xo385.com1.z0.glb.clouddn.com/gnome_desktop.png" alt="gnome-desktop"></p>
<p>为防止安装失败首先更新系统软件列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p>执行下列命令安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install gnome-core</div><div class="line">sudo apt-get install ubuntu-gnome-desktop</div></pre></td></tr></table></figure></p>
<p>我第一次没有安装<strong>gnome-core</strong>导致，导致多次安装失败，结果还重装了几次系统<del datetime="2015-12-15T09:17:14+00:00">还好是虚拟机</del></p>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu-server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu Server 更新源列表]]></title>
      <url>http://xzjqx.data/2015/12/15/ubuntu-server-update-list/</url>
      <content type="html"><![CDATA[<!--
Title: Ubuntu Server 更新源列表
Date: 2015年12月15日
-->
<p>在<strong>Ubuntu Server</strong>下可以使用如下命令更新源列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo su #获取root权限</div><div class="line">cd /etc/apt</div><div class="line">cp source.list source.list.backup #备份源列表</div><div class="line">vim source.list #编辑源列表</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在source.list文件中从开头加入下列代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-backports multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-proposed multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-security multiverse restricted universe</div><div class="line">deb http://mirrors.ustc.edu.cn/ubuntu trusty-updates multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-backports multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-proposed multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-security multiverse restricted universe</div><div class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu trusty-updates multiverse restricted universe</div></pre></td></tr></table></figure></p>
<p>之后使用下列代码更新即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get upgrade -y</div></pre></td></tr></table></figure></p>
<p>注：使用vim更新源列表可能用到的复制粘贴命令</p>
<ul>
<li>y 复制</li>
<li>yy 复制整行</li>
<li>p(小写) 在当前光标后粘贴</li>
<li>P(大写) 在当前光标粘贴</li>
</ul>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu-server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[调出grub并应用其引导Windows+Ubuntu启动]]></title>
      <url>http://xzjqx.data/2015/11/25/open-grub/</url>
      <content type="html"><![CDATA[<!--
Title: 调出grub并应用其引导Windows+Ubuntu启动
Date: 2015年11月25日
-->
<p>今天一个室友安装 <strong>Windows+Ubuntu</strong> 双系统，碰上一个小问题，现在记录下来。<br>其实只是一个很简单的问题，但是对于没有用过<strong>linux</strong>系统的少年可能很难，但是有那么句话嘛</p>
<blockquote>
<p>无折腾不少年</p>
</blockquote>
<p>所以只是需要我们多百度查找网上的教程就好了，自己折腾还会记忆深刻呢(^_^)|||<br><a id="more"></a></p>
<h2 id="唠完了，以下是正题"><a href="#唠完了，以下是正题" class="headerlink" title="唠完了，以下是正题"></a>唠完了，以下是正题</h2><p>问题是装完<strong>Ubuntu</strong>后重启直接进入了<strong>Ubuntu</strong>，而没有引导界面</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先打开终端输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-grub</div></pre></td></tr></table></figure></p>
<p>输入用户密码后看到以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Generating grub configuration file ...</div><div class="line">Warning: Setting GRUB_TIMEOUT to a non-zero value when GRUB_HIDDEN_TIMEOUT is set is no longer supported.</div><div class="line">Found linux image: /boot/vmlinuz-3.16.0-23-generic</div><div class="line">Found initrd image: /boot/initrd.img-3.16.0-23-generic</div><div class="line">Found memtest86+ image: /boot/memtest86+.elf</div><div class="line">Found memtest86+ image: /boot/memtest86+.bin</div><div class="line">Found Windows 8 (loader) on /dev/sda1</div><div class="line">done</div></pre></td></tr></table></figure></p>
<p>发现可以找到windows，那为什么没有<strong>grub</strong>的引导呢<br>我们输入以下代码看看<strong>grub</strong>的默认配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/defauit/grub</div></pre></td></tr></table></figure></p>
<p>我们发现<strong>GRUB_HIDDEN_TIMEOUT</strong>项的值为0<br>将<strong>GRUB_HIDDEN_TIMEOUT=0</strong>改为<strong>GRUB_HIDDEN_TIMEOUT=1</strong>试试</p>
<p>然后再<strong>sudo update-grub</strong>更新grub配置<br>最后<strong>sudo reboot</strong>重启系统。</p>
<p>结果是出现了<strong>grub</strong>引导且有windows项，问题就这么被我们解决了，想想真的挺简单的。</p>
<h2 id="再附上一个修改grub使windows为第一启动项的方法"><a href="#再附上一个修改grub使windows为第一启动项的方法" class="headerlink" title="再附上一个修改grub使windows为第一启动项的方法"></a>再附上一个修改grub使windows为第一启动项的方法</h2><p>输入<strong>sudo nautilus</strong>以管理员身份打开文件管理器，图形化界面进入<strong>/etc/grub.d</strong>目录，将文件<strong>30_os-prober</strong>的文件名中的<strong>30</strong>改为<strong>5~10中的一个（不包括5和10）</strong></p>
<p>然后再<strong>sudo update-grub</strong>更新grub配置<br>最后<strong>sudo reboot</strong>重启系统。</p>
<p>重启后<strong>Windows 8 (loader) on</strong>就在第一项了，默认进入的也是<strong>windows</strong></p>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grub </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录Hexo的搭建过程]]></title>
      <url>http://xzjqx.data/2015/11/16/hexo-build/</url>
      <content type="html"><![CDATA[<p>这是我第一次在自己搭建的博客上编写Markdown文章，现在心里还是有点小激动<br>经过几天的检索+实验+再检索+再实验，终于把这样的一个Hexo博客搭建好了，现在正是心情大好，是时候LOL一发了……额，别跑题==<br><a id="more"></a><br>好了，到正题了，以下是我的搭建实录：<br>我使用的是 Hexo+Github 部署的博客系统：</p>
<blockquote>
<p>GitHub is a Web-based Git repository hosting service. ——<a href="https://en.wikipedia.org/wiki/GitHub" target="_blank" rel="external">Wikipedia</a><br>Hexo is a fast, simple &amp; powerful blog framework, powered by Node.js. ——<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></p>
</blockquote>
<h1 id="Hexo的安装过程查看Hexo静态博客使用指南"><a href="#Hexo的安装过程查看Hexo静态博客使用指南" class="headerlink" title="Hexo的安装过程查看Hexo静态博客使用指南"></a>Hexo的安装过程查看<a href="http://www.tuicool.com/articles/Jva2iaA" target="_blank" rel="external">Hexo静态博客使用指南</a></h1><p>这是在 Mac or Linux 下的安装， Windows 的安装几乎一样，只是要你转到 git bash 下执行这些操作了（<del>熟悉使用</del>git就能很快上手）</p>
<h1 id="配置-Github-Pages"><a href="#配置-Github-Pages" class="headerlink" title="配置 Github Pages"></a>配置 Github Pages</h1><p>使用<a href="https://github.com/" target="_blank" rel="external">Github</a>之前需要注册账号，并添加 SSH key，请移步<a href="http://jingyan.baidu.com/article/a65957f4f0acc624e67f9bc1.html" target="_blank" rel="external">如何SHH key给GITHUB</a></p>
<h1 id="在-Github-添加仓库"><a href="#在-Github-添加仓库" class="headerlink" title="在 Github 添加仓库"></a>在 Github 添加仓库</h1><p>在 Github 中添加名为 yourname.github.io 的仓库，比如我的就是 xiao-jian.github.io 然后将形如 git@github.com:xzjqx/xzjqx.github.io.git 的SSH保存下来方便在 Hexo 中配置</p>
<h1 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h1><p>我把网站部署在了 Github 上，修改 Hexo 根目录下的_config.yml文件（在deploy下添加）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:Xiao-Jian/xiao-jian.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>然后使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g #hexo generate</div><div class="line">hexo d #hexo deploy</div></pre></td></tr></table></figure>
<p>第一次部署发现提示错误信息：ERROR Deployer not found : git<br>需要先运行以下命令npm install hexo-deployer-git –save<br>再次部署即可成功。</p>
<p>当然还可以在部署之前使用hexo s #hexo serve在本地服务器提前查看效果——在浏览器中输入localhost:4000查看效果</p>]]></content>
      
        <categories>
            
            <category> 技术博文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
            <tag> Coding Pages </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[软件实习笔记三（Qt5.5连接MySQL5.6）]]></title>
      <url>http://xzjqx.data/2015/10/02/software-practice-3/</url>
      <content type="html"><![CDATA[<p>这段时间一直在尝试使用Qt连接上MySQL数据库，真的是有点难啊！！！<br>参考了很多网上的资料，最后才成功的连上了数据库，文末将会有我认为有用的链接。<br>成功后发现其实也没有那么难嘛，只是自己真的是有点傻呢==</p>
<a id="more"></a>
<p>首先Qt5以后自带MySQL的驱动，不像现在网上那些Qt4的教程，需要我们自己重新编译加载MySQL的驱动，这样整个过程确实简单多了。。。<br>所以安装MySQL的过程就不赘述了。。。<br>接下来要介绍连接数据库的各种错误：</p>
<h3 id="链接错误"><a href="#链接错误" class="headerlink" title="链接错误"></a>链接错误</h3><p>错误显示如下：<br><img src="http://img.blog.csdn.net/20151003003748400" alt=""></p>
<p>解决方法：由于在qt中使用了数据库，但是在它的项目文件中却没有相应的说明，所以在工程的.pro文件加入一句代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QT += sql</div></pre></td></tr></table></figure></p>
<h3 id="提示能找到MySQL数据库，但是不能加载数据库"><a href="#提示能找到MySQL数据库，但是不能加载数据库" class="headerlink" title="提示能找到MySQL数据库，但是不能加载数据库"></a>提示能找到MySQL数据库，但是不能加载数据库</h3><p>错误显示如下：<br><img src="http://img.blog.csdn.net/20151003005433524" alt=""></p>
<p>这个问题就比较复杂了，我们需要进行调试，调试过程如下：</p>
<ul>
<li>首先使用qDebug输出错误信息，在main函数中加入以下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">qDebug() &lt;&lt; QSqlDatabase::drivers();  </div><div class="line">qDebug() &lt;&lt; QCoreApplication::libraryPaths();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>应用程序输出显示如下错误信息：<br><img src="http://img.blog.csdn.net/20151003005757654" alt=""></p>
<p>发现我们输出的可使用数据库的驱动中存在“<strong>QMYSQL</strong>”，但是在连接时不能找到，这是为什么呢？我们接着向下看，发现在库依赖中的<code>D:/Qt/Qt5.5.0/5.5/mingw492_32/plugins</code>目录下存在sqldrivers目录，说明驱动存在，那原因到底是什么呢，再看后面提示的<br><code>D:/build-QtTest-Desktop_Qt_5_5_0_MinGW_32bit-Debug/debug</code>目录，该目录是程序输入目录，库依赖指到这，说明其中缺少了什么库嘛，那我们现在的目标是去找出缺少的库，加入在这个文件夹中应该就能解决问题了。</p>
<ul>
<li>我们将主函数的代码改成下述代码，再查看程序输出查找原因：<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlDatabase&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlQuery&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlError&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPluginLoader&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span>  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMySqlDriver</span><span class="params">()</span></span>;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;  </div><div class="line">    <span class="function">QCoreApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </div><div class="line">    loadMySqlDriver();  </div><div class="line">    <span class="keyword">return</span> app.exec();  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMySqlDriver</span><span class="params">()</span> </span>&#123;  </div><div class="line">    QPluginLoader loader;  </div><div class="line">    <span class="comment">// MySQL 驱动插件的路径  </span></div><div class="line">    loader.setFileName(<span class="string">"D:/Qt/Qt5.5.0/5.5/mingw492_32/plugins/sqldrivers/qsqlmysqld.dll"</span>);  </div><div class="line">    qDebug() &lt;&lt; loader.load();  </div><div class="line">    qDebug() &lt;&lt; loader.errorString();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>显示错误如下：<br><img src="http://img.blog.csdn.net/20151003011500167" alt=""></p>
<p>由此看来加载<strong>MySQL</strong>驱动出错不是找不到驱动插件<code>qsqlmysqld.dll</code>，而是找不到<code>qsqlmysqld.dll</code>依赖的<strong>DLL</strong>. 把<code>~/MySQL Server 5.6/lib</code>下的<br><code>libmysql.dll</code>和<code>libmysqld.dll</code>复制到<strong>exe</strong>文件所在目录(如下图)<br><img src="http://img.blog.csdn.net/20151003011923063" alt=""></p>
<ul>
<li><p>然后再运行程序，这时 MySQL 驱动插件就加载成功了，输出如下：<br><img src="http://img.blog.csdn.net/20151003012133782" alt=""></p>
</li>
<li><p>最后我们修改main函数查看能否连接数据库：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlDatabase&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlQuery&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qtsql/QSqlError&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPluginLoader&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conn.h"</span>  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;  </div><div class="line">    <span class="function">QCoreApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </div><div class="line">    QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">"QMYSQL"</span>);  </div><div class="line">    db.setHostName(<span class="string">"localhost"</span>);  </div><div class="line">    db.setDatabaseName(<span class="string">"qt"</span>);  </div><div class="line">    db.setUserName(<span class="string">"root"</span>);  </div><div class="line">    db.setPassword(<span class="string">""</span>);  </div><div class="line"></div><div class="line">    <span class="keyword">if</span>( !db.open() ) &#123;  </div><div class="line">        qDebug() &lt;&lt; <span class="string">"不能连上数据库"</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span> &#123;  </div><div class="line">        qDebug() &lt;&lt; <span class="string">"成功连上数据库"</span>;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> app.exec();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>若输出如下，则成功连接上了数据库：<br><img src="http://img.blog.csdn.net/20151003012346901" alt=""></p>
</li>
</ul>
<p>至此，问题彻底解决啦(^_^)</p>
<h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>此外，使用过程中还会碰上一些小问题，不要慌，都是可以解决的<br>比如以下情况：这是因为你的上一个程序没有完全关闭，所以不能打开下一个调试程序，只需在应用程序输出中把之前的程序全部关闭再重新运行就不会出现这个问题了。<br><img src="http://img.blog.csdn.net/20151003012606960" alt=""></p>
<h4 id="最后附上参考网站："><a href="#最后附上参考网站：" class="headerlink" title="最后附上参考网站："></a>最后附上参考网站：</h4><p><a href="http://blog.csdn.net/lhfeng/article/details/1822784" target="_blank">http://blog.csdn.net/lhfeng/article/details/1822784</a><br><a href="http://blog.chinaunix.net/uid-29278628-id-4049544.html" target="_blank">http://blog.chinaunix.net/uid-29278628-id-4049544.html</a><br><a href="http://tieba.baidu.com/p/3542726621" target="_blank">http://tieba.baidu.com/p/3542726621</a><br><a href="http://qtdebug.com/DB-AccessMySQL.html" target="_blank">http://qtdebug.com/DB-AccessMySQL.html</a></p>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Qt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[软件实习笔记二（Qt简单对话框实例开发）]]></title>
      <url>http://xzjqx.data/2015/09/30/software-practice-2/</url>
      <content type="html"><![CDATA[<p>最近找到Qt5开发系列教程——《QT5开发及实例》，觉得不错，想着就先按照上面的安排来学习软件开发吧，第一章讲述了一个小的对话框的开发实例。<br><a id="more"></a></p>
<h2 id="首先按照以下过程创建对话框Dialog工程"><a href="#首先按照以下过程创建对话框Dialog工程" class="headerlink" title="首先按照以下过程创建对话框Dialog工程"></a>首先按照以下过程创建对话框Dialog工程</h2><p><img src="http://img.blog.csdn.net/20150930214127088" alt=""><br><img src="http://img.blog.csdn.net/20150930214143294" alt=""><br><img src="http://img.blog.csdn.net/20150930214156046" alt=""><br><img src="http://img.blog.csdn.net/20150930214205792" alt=""></p>
<h2 id="使用设计器设计图形化界面"><a href="#使用设计器设计图形化界面" class="headerlink" title="使用设计器设计图形化界面"></a>使用设计器设计图形化界面</h2><p>首先打开工程下界面文件中的dialog.ui，进入设计界面如下（<strong>这是我的图形化设计结果</strong>）：<br><img src="http://img.blog.csdn.net/20150930214604064" alt=""></p>
<p>其中的“输入半径获得圆面积”、“半径：”、“面积”和面积右边的文本框均是从左边的“<strong>Display Widgets</strong>”拖出来的<strong>Label</strong>类，修改<strong>Label</strong>属性可从右下角的属性栏中进行。“半径：”右侧的文本输入框是<strong>LineEdit</strong>控件，“计算”是<strong>Push Button</strong>控件，同样其属性可以修改。此外还可手动拖动控件或<strong>Dialog</strong>调节其大小。最重要的是“面积：”右侧的Label属性设置，将其中的<strong>QFrame</strong>项设置如下：<br><img src="http://img.blog.csdn.net/20150930215716474" alt=""></p>
<h2 id="增加按键响应代码实现计算功能"><a href="#增加按键响应代码实现计算功能" class="headerlink" title="增加按键响应代码实现计算功能"></a>增加按键响应代码实现计算功能</h2><p>属性全部设置好后就要添加面积计算实现代码了，在dialog.cpp中添加如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Dialog::on_pushButton_clicked()  </div><div class="line">&#123;  </div><div class="line">    bool ok;  </div><div class="line">    QString tmpStr;  </div><div class="line">    QString valStr = ui-&gt;lineEdit-&gt;text();  </div><div class="line">    <span class="keyword">int</span> valInt = valStr.toInt(&amp;ok);  </div><div class="line">    <span class="keyword">double</span> area = valInt * valInt * Pi;  </div><div class="line">    ui-&gt;areaLable_2-&gt;setText(tmpStr.setNum(area));  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中Pi需要全局定义<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">double</span> Pi = <span class="number">3.1415926</span>;</div></pre></td></tr></table></figure></p>
<h2 id="构建并运行工程检验成果"><a href="#构建并运行工程检验成果" class="headerlink" title="构建并运行工程检验成果"></a>构建并运行工程检验成果</h2><p>如果出现下述界面，那么恭喜你完成这这个小程序的开发<br><img src="http://img.blog.csdn.net/20150930220816632" alt=""></p>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Qt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[软件实习笔记一（Qt安装与简单使用）]]></title>
      <url>http://xzjqx.data/2015/09/29/software-practice-1/</url>
      <content type="html"><![CDATA[<h2 id="下载带有MinGW的Qt-类库和Qt-Creator"><a href="#下载带有MinGW的Qt-类库和Qt-Creator" class="headerlink" title="下载带有MinGW的Qt 类库和Qt Creator"></a>下载带有MinGW的Qt 类库和Qt Creator</h2><p>我先是下了一个不带MinGW的64位版，相使用自己电脑里的MinGW，但是发现并不能使用，所以，重新下过带MinGW的32位版。<br>提供<a href="https://www.qt.io/cn/download-open-source/" target="_blank">下载地址</a>和<a href="https://pan.baidu.com/s/1pJOkZjH" target="_blank">网盘地址</a></p>
<a id="more"></a>
<h2 id="正常安装Qt"><a href="#正常安装Qt" class="headerlink" title="正常安装Qt"></a>正常安装Qt</h2><p>安装过程就不多说了，正常的安装过程会把Qt类库和Qt Creator一同装在你的电脑里了</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>安装完成后在电脑里找到Qt Creator并打开，打开工具-选项，在左侧找到构建与运行，若安装正确完成，如图所示，在Qt Versions项会自动检测出编译器<br><img src="http://img.blog.csdn.net/20150929203818677" alt="Qt Versions"></p>
<p>若不能得到以上画面，那也不要紧，接下来点击“构建套件（Kit）”，修改Desktop志下述画面的情形，再设为默认即可<br><img src="http://img.blog.csdn.net/20150929203757054" alt="构建套件"></p>
<h3 id="接下来可以开始建立工程简单使用Qt-Creator了"><a href="#接下来可以开始建立工程简单使用Qt-Creator了" class="headerlink" title="接下来可以开始建立工程简单使用Qt Creator了"></a>接下来可以开始建立工程简单使用Qt Creator了</h3><p>点击New Project，选择默认设置<br><img src="http://img.blog.csdn.net/20150929203734994" alt=""></p>
<p>再修改工程名，并设置工程目录（<strong>此时要注意路径中不能含有中文，否则无法运行与调试</strong>）<br><img src="http://img.blog.csdn.net/20150929203713543" alt=""></p>
<p>接下来一直选择默认设置就好了<br><img src="http://img.blog.csdn.net/20150929203657695" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>修改main.cpp代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QVBoxLayout&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QPushButton&gt;  </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc,argv)</span></span>;  </div><div class="line"></div><div class="line">    QWidget *window = <span class="keyword">new</span> QWidget;  </div><div class="line">    window-&gt;setWindowTitle(<span class="string">"QtTest"</span>);  </div><div class="line"></div><div class="line">    <span class="comment">//QLabel *label= new QLabel("Hello Qt");  </span></div><div class="line">    QLabel *label = <span class="keyword">new</span> QLabel(<span class="string">"&lt;h2&gt;&lt;i&gt;Hello&lt;/i&gt;"</span><span class="string">"  &lt;font color = red&gt;Qt&lt;/font&gt;&lt;/h2&gt;"</span>);  </div><div class="line"></div><div class="line">    QPushButton *button=<span class="keyword">new</span> QPushButton(<span class="string">"Quit"</span>);  </div><div class="line">    QObject::connect(button,SIGNAL(clicked()),&amp;app,SLOT(quit()));  </div><div class="line"></div><div class="line">    QVBoxLayout *layout=<span class="keyword">new</span> QVBoxLayout;  </div><div class="line">    layout-&gt;addWidget(label);  </div><div class="line">    layout-&gt;addWidget(button);  </div><div class="line">    window-&gt;setLayout(layout);  </div><div class="line"></div><div class="line">    window-&gt;show();  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> app.exec();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后点击运行，会出现下述小窗口，那么恭喜你，你的Qt Creator已经可以完美工作了！！！<br><img src="http://img.blog.csdn.net/20150929203628947" alt=""></p>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Qt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://xzjqx.data/2015/09/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
      
        
    </entry>
    
  
  
</search>
